using static TicTacToe.TicTacToe;

namespace TicTacToe;

public class DramatistBot : IBot
{
    // üé≠ –ê–∫—Ç—ã –ø—å–µ—Å—ã
    private const int EXPOSITION = 0; // 1‚Äì2 —Ö–æ–¥: –∏–ª–ª—é–∑–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è
    private const int CONFLICT   = 1; // 3‚Äì4 —Ö–æ–¥: –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
    private const int CLIMAX     = 2; // 5+ —Ö–æ–¥: –∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è

    public int GetTurn(TicTacToe game, Random random)
    {
        // üõë 1. –í–°–ï–ì–î–ê –°–ù–ê–ß–ê–õ–ê ‚Äî –ø–æ–±–µ–¥–∞ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        if (game.TryWinAndBlock(out int priorityCell))
            return HandlePriorityMove(game, priorityCell, random);

        // üé¨ 2. –ò–ì–†–ê–ï–ú –ü–û –°–¶–ï–ù–ê–†–ò–Æ
        return PlayAct(game, random);
    }

    private int HandlePriorityMove(TicTacToe game, int cell, Random random)
    {
        uint turn = game.ReadCurrentTurn();

        // –í —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ ‚Äî –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–≥–æ–¥–Ω—ã–π —Ö–æ–¥ —Ä–∞–¥–∏ –¥—Ä–∞–º—ã (30%)
        if (GetAct(turn) == EXPOSITION && random.Next(100) < 30)
        {
            int fallback = game.GetBestTurn();
            return fallback; // –í—Å—ë —Ä–∞–≤–Ω–æ –¥–µ–ª–∞–µ–º *—Ö–æ—Ä–æ—à–∏–π*, –Ω–æ –Ω–µ *–æ—á–µ–≤–∏–¥–Ω—ã–π* —Ö–æ–¥
        }

        // –í –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –∏ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–∏ ‚Äî –ø–æ–±–µ–∂–¥–∞–µ–º. –≠—Ç–æ –Ω–µ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è.
        return cell;
    }

    private int PlayAct(TicTacToe game, Random random)
    {
        uint turn = game.ReadCurrentTurn();
        int player = game.ReadWhoseTurn();
        int opponent = game.ReadWhoseTurn() ^ XO;

        return GetAct(turn) switch
        {
            EXPOSITION => ExpositionStrategy(game, random),
            CONFLICT   => ConflictStrategy(game, random, player, opponent),
            CLIMAX     => ClimaxStrategy(game, player, random),
            _          => game.GetBestTurn()
        };
    }

    private static int GetAct(uint turn) => turn switch
    {
        <= 2 => EXPOSITION,
        <= 4 => CONFLICT,
        _    => CLIMAX
    };

    // üé≠ –ê–∫—Ç 1: –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è ‚Äî ¬´–¢—ã –≥–µ—Ä–æ–π. –ü–æ–∫–∞ —á—Ç–æ.¬ª
    private static int ExpositionStrategy(TicTacToe game, Random random)
    {
        // –í 70% ‚Äî —É—Å—Ç—É–ø–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º—É –Ω–∞–ø–æ—Ä—É
        if (game.IsLegalMove(CENTER) && random.Next(100) < 70)
            return random.Next(100) < 50 
                ? PickRandomCorner(game, random) 
                : PickRandomEdge(game, random);

        // –ò–Ω–∞—á–µ ‚Äî –¥–µ–ª–∞–µ–º —Ö–æ–¥ –≤ —É–≥–æ–ª (–Ω–æ –Ω–µ –≤ —Ü–µ–Ω—Ç—Ä!)
        return PickRandomCorner(game, random);
    }

    // ‚öîÔ∏è –ê–∫—Ç 2: –ö–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äî ¬´–¢—ã –¥—É–º–∞–ª, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å?¬ª
    private static int ConflictStrategy(TicTacToe game, Random random, int player, int opponent)
    {
        // –ï—Å–ª–∏ –º—ã –≤ —Ü–µ–Ω—Ç—Ä–µ ‚Äî –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–µ–º –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        if (game.ReadCellType(CENTER) == player)
        {
            int counter = FindCounterCorner(game, opponent);
            if (counter != -1) return counter;
        }

        // –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–∏–º–∞–µ–º —É–≥–æ–ª
        int corner = PickRandomCorner(game, random);
        return corner != -1 ? corner : game.GetBestTurn();
    }

    // üî• –ê–∫—Ç 3: –ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è ‚Äî ¬´–ú–æ—è –ø–æ–±–µ–¥–∞. –ú–æ–π —Ç–µ–∞—Ç—Ä.¬ª
    private static int ClimaxStrategy(TicTacToe game, int player, Random random)
    {
        // –í 40% ‚Äî –¥–µ–ª–∞–µ–º –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–π, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ö–æ–¥
        if (random.Next(100) < 40)
            return game.GetBestTurn();

        // –í 60% ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–±–µ–∂–¥–∞–µ–º, –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–æ
        return game.GetBestTurn();
    }

    // üé≤ –°–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª
    private static int PickRandomCorner(TicTacToe game, Random random)
    {
        var corners = Corners;
        random.Shuffle(corners);
        return corners.FirstOrDefault(game.IsLegalMove, game.GetBestTurn());
    }

    // üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Ä–µ–±—Ä–æ
    private static int PickRandomEdge(TicTacToe game, Random random)
    {
        var edges = Edges;
        random.Shuffle(edges);
        return edges.FirstOrDefault(game.IsLegalMove, game.GetBestTurn());
    }

    // üîÆ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —É–≥–æ–ª –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    private static int FindCounterCorner(TicTacToe game, int opponent)
    {
        var opposite = new Dictionary<int, int> { { 0, 8 }, { 2, 6 }, { 6, 2 }, { 8, 0 } };
        for (int cell = 0; cell < 9; cell++)
        {
            if (game.ReadCellType(cell) == opponent && 
                opposite.TryGetValue(cell, out int counter) && 
                game.IsLegalMove(counter))
                return counter;
        }
        return game.GetBestTurn(); // fallback ‚Äî –ª—É—á—à–∏–π —Ö–æ–¥
    }
}
