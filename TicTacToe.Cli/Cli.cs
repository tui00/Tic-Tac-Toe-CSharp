using System.Net.Http.Json;
using System.Text.Json;
using TicTacToe.Dto;

namespace TicTacToe.Cli;

public class Cli : IDisposable
{
    private const int EMPTY = 0;
    private const int X = 1;
    private const int O = 2;
    private const int XO = 3;

    private enum Action
    {
        CreateGame,
        JoinToGame,
        Quit
    }

    private int _player;
    private readonly HttpClient _client;
    private Guid _gameId = Guid.Empty;

    public Cli()
    {
        _client = new();
    }

    ~Cli() => Dispose();

    // ========================================================================
    // üü© –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –ó–ê–ü–£–°–ö–ê
    // ========================================================================

    public async Task<int> Start()
    {
        if (!TryConfigurate()) return 1;

        if (!await TryTestConnectionAsync()) return 1;

        try
        {
            Action userAction = GetUserAction();
            switch (userAction)
            {
                case Action.CreateGame: await CreateGameAsync(); break;
                case Action.JoinToGame: await JoinToGameAsync(); break;
                case Action.Quit: return 0;
            }
            if (_gameId == Guid.Empty)
            {
                Console.WriteLine("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...");
                return 0;
            }
            Console.WriteLine("–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É...");
            await PlayAsync();
        }
        catch (HttpRequestException)
        {
            Console.WriteLine("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            return 1;
        }
        catch (JsonException)
        {
            Console.WriteLine("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.");
            return 1;
        }
        return 0;
    }

    // ========================================================================
    // üü¶ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
    // ========================================================================

    private bool TryConfigurate()
    {
        string[] config;
        try
        {
            config = File.ReadAllText("config").Replace("\r", "").Split('\n');
        }
        catch (FileNotFoundException)
        {
            Console.WriteLine("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.");
            return false;
        }
        _client.BaseAddress = new(config[0]);
        _client.Timeout = TimeSpan.FromSeconds(10);
        return true;
    }

    private async Task<bool> TryTestConnectionAsync()
    {
        try
        {
            _ = await GetGamesListAsync();
        }
        catch (HttpRequestException)
        {
            return false;
        }
        return true;
    }

    // ========================================================================
    // üü® –í–í–û–î –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –í–´–ë–û–† –î–ï–ô–°–¢–í–ò–Ø
    // ========================================================================

    private static Action GetUserAction()
    {
        Console.WriteLine("–ü—Ä–∏–≤–µ—Ç –í–≤–µ–¥–∏—Ç–µ:");
        Console.WriteLine("  (c)reate ‚Äî —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É");
        Console.WriteLine("  (j)oin  ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ");
        Console.WriteLine("  (q)uit  ‚Äî –≤—ã–π—Ç–∏");
        while (true)
        {
            char input = Console.ReadKey(true).KeyChar;
            if (input is not ('c' or 'j' or 'q')) continue;
            Console.WriteLine("–û–±—Ä–∞–±–æ—Ç–∫–∞...");
            return input switch
            {
                'c' => Action.CreateGame,
                'j' => Action.JoinToGame,
                _ => Action.Quit
            }
        ;
    }
    }

    private async Task<int> GetValidInputAsync()
    {
        Console.WriteLine("–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ö–æ–¥–∏—Ç—å? –ü–æ–ª–µ –¥–ª—è –∏–≥—Ä—ã ‚Äî —ç—Ç–æ NumPad. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏:");
        int input;
        do
        {
            input = Console.ReadKey(true).KeyChar - '1';
            input += (input < 3) ? 6 : ((input > 5) ? -6 : 0);
        } while ((await _client.GetFromJsonAsync<IsLegalResponse>($"game/{_gameId}/isLegal/{input}"))?.IsLegal != true);
        return input;
    }

    // ========================================================================
    // üü™ –°–ï–¢–ï–í–´–ï –ó–ê–ü–†–û–°–´
    // ========================================================================

    private async Task<TOut> PostAsync<TOut, TBody>(string url, TBody body)
    {
        return await (await _client.PostAsJsonAsync(url, body)).Content.ReadFromJsonAsync<TOut>() ?? throw new HttpRequestException();
    }

    private async Task<Guid[]> GetGamesListAsync()
    {
        return (await _client.GetFromJsonAsync<ListGamesResponse>("game/list") ?? throw new HttpRequestException()).Ids;
    }

    private async Task<string[]> GetBotsListAsync()
    {
        return (await _client.GetFromJsonAsync<GetBotsResponse>("game/bots") ?? throw new HttpRequestException()).Names;
    }

    // ========================================================================
    // üü´ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–û–ô: –°–û–ó–î–ê–ù–ò–ï, –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï, –ò–ì–†–û–í–û–ô –¶–ò–ö–õ
    // ========================================================================

    public async Task PlayAsync()
    {
        GameResponse response = await PostAsync<GameResponse, ConnectPlayerRequest>($"game/{_gameId}/connect", new(_player));

        while (true)
        {
            while (Console.KeyAvailable)
                _ = Console.ReadKey(true);

            if (PrintGameBoardAndCheckWin(response)) break;

            string oldMessage = "";

            while (response.Turn != _player || response.ConnectedPlayers != XO)
            {
                response = await _client.GetFromJsonAsync<GameResponse>($"game/{_gameId}") ?? throw new HttpRequestException();

                string message = $"–û–∂–∏–¥–∞–Ω–∏–µ {(response.ConnectedPlayers != XO ? "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" : "—Ö–æ–¥–∞")} {(_player == X ? 'O' : 'X')}...";

                if (message != oldMessage)
                {
                    Console.CursorLeft = 0;
                    Console.Write(new string(' ', Console.WindowWidth));
                    Console.CursorLeft = 0;
                    Console.Write(message);
                    oldMessage = message;
                }

                await Task.Delay(1000);
            }

            if (PrintGameBoardAndCheckWin(response)) break;

            response = await PostAsync<GameResponse, MakeTurnRequest>($"game/{_gameId}", new(await GetValidInputAsync()));
        }
        Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã: {(response.Winner == X ? "X –ø–æ–±–µ–¥–∏–ª" : response.Winner == O ? "O –ø–æ–±–µ–¥–∏–ª" : "–ù–∏—á—å—è")}");
    }

    public async Task JoinToGameAsync()
    {
        Console.WriteLine("–ö–∞–∫–æ–π –∫–æ–¥ —É –∏–≥—Ä—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è? –ù–∞–∂–º–∏—Ç–µ Escape, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:");

        string input = "";

        while (true)
        {
            Guid[] games = await GetGamesListAsync();
            Guid[] matchingGuids = [.. games.Where(guid => guid.ToString().StartsWith(input, StringComparison.OrdinalIgnoreCase))];

            if (matchingGuids.Length == 1)
            {
                GameResponse response = await _client.GetFromJsonAsync<GameResponse>($"game/{matchingGuids[0]}") ?? throw new HttpRequestException();
                if (response.ConnectedPlayers != XO)
                {
                    Console.WriteLine(matchingGuids[0].ToString()[input.Length..]);
                    _player = response.ConnectedPlayers ^ XO;
                    _gameId = matchingGuids[0];
                    return;
                }
            }

            char symbol = Console.ReadKey(true).KeyChar;
            if (!char.IsControl(symbol))
            {
                int len = input.Length;
                bool isValidSymbol = len switch
                {
                    < 36 when len is not (14 or 19 or 8 or 13 or 18 or 23) => char.IsAsciiHexDigit(symbol),
                    14 => symbol == '4',
                    8 or 13 or 18 or 23 => symbol == '-',
                    _ => false
                };
                if (isValidSymbol)
                {
                    Console.Write(symbol);
                    input += symbol;
                }
            }
            else if (symbol == '\b' && input.Length != 0)
            {
                Console.CursorLeft--;
                Console.Write(' ');
                Console.CursorLeft--;
                input = input[..^1];
            }
            else if (symbol == '\x1b')
            {
                Console.WriteLine();
                return;
            }
        }
    }

    public async Task CreateGameAsync()
    {
        string[] bots = await GetBotsListAsync();

        Console.WriteLine(string.Join('\n', ["–£—Ä–æ–≤–Ω–∏:", .. bots.Select((b, i) => $"{i}. {b}")]));

        Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è X:");
        int I;
        while (!int.TryParse(Console.ReadLine(), out I) || I < 0 || I >= bots.Length) { }

        Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è O:");
        int Enemy;
        while (!int.TryParse(Console.ReadLine(), out Enemy) || Enemy < 0 || Enemy >= bots.Length) { }

        NewGameResponse response = await PostAsync<NewGameResponse, NewGameRequest>("game/new", new((uint)I, (uint)Enemy));

        if (I == 0 && Enemy == 0)
        {
            Console.WriteLine("X –∏–≥—Ä–∞–µ—Ç –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ? –í–≤–µ–¥–∏—Ç–µ (y)es –∏–ª–∏ (n)o:");
            char input;
            do
            {
                input = Console.ReadKey(true).KeyChar;
            } while (input != 'y' && input != 'n');
            _player = input == 'y' ? X : O;
        }
        else
        {
            _player = I == 0 ? X : Enemy == 0 ? O : EMPTY;
        }

        _gameId = response.Id;
    }

    // ========================================================================
    // üü• –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ò–ì–†–û–í–û–ì–û –ü–û–õ–Ø
    // ========================================================================

    private bool PrintGameBoardAndCheckWin(GameResponse game)
    {
        Console.Clear();
        string result = "";
        for (int y = 0; y < 9; y += 3)
        {
            char x1 = game.Board[y + 0] == '-' ? ' ' : char.ToUpper(game.Board[y + 0]);
            char x2 = game.Board[y + 1] == '-' ? ' ' : char.ToUpper(game.Board[y + 1]);
            char x3 = game.Board[y + 2] == '-' ? ' ' : char.ToUpper(game.Board[y + 2]);
            result += $"{x1} ‚îÇ {x2} ‚îÇ {x3}";

            if (y != 6) result += $"\n‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ\n";
        }
        Console.WriteLine(result);
        Console.WriteLine($"–ö–æ–¥ –∏–≥—Ä—ã: {_gameId}");
        return game.Winner != 0;
    }

    // ========================================================================
    // üü® –û–°–í–û–ë–û–ñ–î–ï–ù–ò–ï –†–ï–°–£–†–°–û–í
    // ========================================================================

    public void Dispose()
    {
        _client.Dispose();
        GC.SuppressFinalize(this);
    }
}
